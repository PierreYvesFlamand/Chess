function calculate_possible_moves(y){let x=[];switch(y.moveType){case"pawn":x=pawn_logic(y);break;case"rook":x=rook_logic(y);break;case"knight":x=knight_logic(y);break;case"bishop":x=bishop_logic(y);break;case"queen":x=queen_logic(y);break;case"king":x=king_logic(y);break;default:console.error("Swicth error",y)}return x}function is_possible_moves(y){const x=[];return y.forEach(y=>{for(j=0;j<y.length&&("empty"===check_if_pos_is_reachable(y[j])||"has-pawn-to-kill"===check_if_pos_is_reachable(y[j]));j++){if("has-pawn-to-kill"===check_if_pos_is_reachable(y[j])){x.push({...y[j],kill:grid[y[j].y][y[j].x]});break}x.push({...y[j],kill:null})}}),x}function check_if_pos_is_reachable(y){return y.y<0||y.y>7||y.x<0||y.x>7?"out-of-board":null===grid[y.y][y.x]?"empty":grid[y.y][y.x].color===(currentPlayer?"black":"white")?"has-friendly-pawn":"has-pawn-to-kill"}function pawn_logic(y){const x=[];return pos={x:y.x,y:currentPlayer?y.y+1:y.y-1},"empty"===check_if_pos_is_reachable(pos)&&(x.push({...pos,kill:null}),y.y==(currentPlayer?1:6)&&(pos={x:y.x,y:currentPlayer?y.y+2:y.y-2},"empty"===check_if_pos_is_reachable(pos)&&x.push({...pos,kill:null}))),pos=[{x:y.x+1,y:currentPlayer?y.y+1:y.y-1},{x:y.x-1,y:currentPlayer?y.y+1:y.y-1}],pos.forEach(y=>{"has-pawn-to-kill"===check_if_pos_is_reachable(y)&&x.push({...y,kill:grid[y.y][y.x]})}),x}function rook_logic(y){return pos=[[{x:y.x,y:y.y+1},{x:y.x,y:y.y+2},{x:y.x,y:y.y+3},{x:y.x,y:y.y+4},{x:y.x,y:y.y+5},{x:y.x,y:y.y+6},{x:y.x,y:y.y+7}],[{x:y.x,y:y.y-1},{x:y.x,y:y.y-2},{x:y.x,y:y.y-3},{x:y.x,y:y.y-4},{x:y.x,y:y.y-5},{x:y.x,y:y.y-6},{x:y.x,y:y.y-7}],[{x:y.x+1,y:y.y},{x:y.x+2,y:y.y},{x:y.x+3,y:y.y},{x:y.x+4,y:y.y},{x:y.x+5,y:y.y},{x:y.x+6,y:y.y},{x:y.x+7,y:y.y}],[{x:y.x-1,y:y.y},{x:y.x-2,y:y.y},{x:y.x-3,y:y.y},{x:y.x-4,y:y.y},{x:y.x-5,y:y.y},{x:y.x-6,y:y.y},{x:y.x-7,y:y.y}]],is_possible_moves(pos)}function knight_logic(y){return pos=[[{x:y.x-2,y:y.y-1}],[{x:y.x-2,y:y.y+1}],[{x:y.x-1,y:y.y-2}],[{x:y.x-1,y:y.y+2}],[{x:y.x+1,y:y.y-2}],[{x:y.x+1,y:y.y+2}],[{x:y.x+2,y:y.y-1}],[{x:y.x+2,y:y.y+1}]],is_possible_moves(pos)}function bishop_logic(y){return pos=[[{x:y.x-1,y:y.y-1},{x:y.x-2,y:y.y-2},{x:y.x-3,y:y.y-3},{x:y.x-4,y:y.y-4},{x:y.x-5,y:y.y-5},{x:y.x-6,y:y.y-6},{x:y.x-7,y:y.y-7}],[{x:y.x+1,y:y.y-1},{x:y.x+2,y:y.y-2},{x:y.x+3,y:y.y-3},{x:y.x+4,y:y.y-4},{x:y.x+5,y:y.y-5},{x:y.x+6,y:y.y-6},{x:y.x+7,y:y.y-7}],[{x:y.x-1,y:y.y+1},{x:y.x-2,y:y.y+2},{x:y.x-3,y:y.y+3},{x:y.x-4,y:y.y+4},{x:y.x-5,y:y.y+5},{x:y.x-6,y:y.y+6},{x:y.x-7,y:y.y+7}],[{x:y.x+1,y:y.y+1},{x:y.x+2,y:y.y+2},{x:y.x+3,y:y.y+3},{x:y.x+4,y:y.y+4},{x:y.x+5,y:y.y+5},{x:y.x+6,y:y.y+6},{x:y.x+7,y:y.y+7}]],is_possible_moves(pos)}function queen_logic(y){return rook_logic(y).concat(bishop_logic(y))}function king_logic(y){return pos=[[{x:y.x-1,y:y.y-1}],[{x:y.x-1,y:y.y}],[{x:y.x-1,y:y.y+1}],[{x:y.x,y:y.y-1}],[{x:y.x,y:y.y+1}],[{x:y.x+1,y:y.y-1}],[{x:y.x+1,y:y.y}],[{x:y.x+1,y:y.y+1}]],possibleMoves=is_possible_moves(pos),y.first_move&&(0===currentPlayer?(Pawns[0][1][1].first_move&&"empty"===check_if_pos_is_reachable({x:5,y:7})&&"empty"===check_if_pos_is_reachable({x:6,y:7})&&possibleMoves.push({x:6,y:7,castle:3}),Pawns[0][1][0].first_move&&"empty"===check_if_pos_is_reachable({x:1,y:7})&&"empty"===check_if_pos_is_reachable({x:2,y:7})&&"empty"===check_if_pos_is_reachable({x:3,y:7})&&possibleMoves.push({x:2,y:7,castle:2})):(Pawns[1][1][1].first_move&&"empty"===check_if_pos_is_reachable({x:1,y:0})&&"empty"===check_if_pos_is_reachable({x:2,y:0})&&"empty"===check_if_pos_is_reachable({x:3,y:0})&&possibleMoves.push({x:2,y:0,castle:0}),Pawns[1][1][1].first_move&&"empty"===check_if_pos_is_reachable({x:5,y:0})&&"empty"===check_if_pos_is_reachable({x:6,y:0})&&possibleMoves.push({x:6,y:0,castle:1}))),possibleMoves}